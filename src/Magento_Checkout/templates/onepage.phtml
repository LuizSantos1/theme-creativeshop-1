<?php
// @codingStandardsIgnoreFile
?>
<div id="checkout" data-bind="scope:'checkout'" class="cs-checkout">
    <div id="checkout-loader" data-role="checkout-loader" class="loading-mask" data-mage-init='{"checkoutLoader": {}}'>
        <div class="loader">
            <img
                src="<?php /* @escapeNotVerified */ echo $block->getViewFileUrl('images/loader-1.gif'); ?>"
                alt="<?php /* @escapeNotVerified */ echo __('Loading...'); ?>"
                style="position: absolute;"
            >
        </div>
    </div>
    <!-- ko template: getTemplate() --><!-- /ko -->
    <script type="text/x-magento-init">
        {
            "#checkout": {
                "Magento_Ui/js/core/app": <?php /* @escapeNotVerified */ echo $block->getJsLayout();?>
            }
        }
    </script>
    <script>
        window.checkoutConfig = <?php /* @escapeNotVerified */ echo \Zend_Json::encode($block->getCheckoutConfig()); ?>;
        // Create aliases for customer.js model from customer module
        window.isCustomerLoggedIn = window.checkoutConfig.isCustomerLoggedIn;
        window.customerData = window.checkoutConfig.customerData;
    </script>
    <script>
        require([
            'mage/url',
            'mage/validation',
            'Magento_Ui/js/block-loader',
            'jquery',
            'bundle'
        ], function(url, validation, blockLoader, $, bundle) {

            //Creativestyle adjustments below

            // Checkout is loaded some time after script is loaded. We need mutation observer here to know when to
            // initialize field watching or tabs
            var checkout = document.getElementById('checkout');

            var step1Loaded = false;
            var step2Loaded = false;
            var nextButtonTriggered = false;
            var paymentButtonsTriggered = false;

            var checkoutStep1Observer = new MutationObserver( function( mutations ) {
                console.log(mutations);

                if ( !$( '#checkout-loader' ).length && !step1Loaded ) {
                    step1Loaded = true;
                    var $form = $( '#shipping-new-address-form' );

                    setPhoneOptional();

                    startTabs();
                    setZipCityFields();

                    bundle.AddressAutofill(
                        {
                            streetField: $form.find( 'input[name="street[0]"]' ),
                            zipField: $form.find( 'input[name="postcode"]'),
                            cityField: $form.find( 'input[name="city"]'),
                            countrySelect: $form.find( 'select[name="country_id"]' ),
                        }
                    );

                }

                if ( $( '.cs-checkout-button-next' ).length && !nextButtonTriggered ) {
                    nextButtonTriggered = true;

                    $( '.cs-checkout-button-next' ).on( 'click', function() {
                        $( '#shipping-method-buttons-container button' ).trigger( 'click' );
                    } );

                } else if ( !$( '.cs-checkout-button-next' ).length && nextButtonTriggered ) {
                    nextButtonTriggered = false;
                }

                if ( $( '.cs-button-payment-method' ).length && $( '.cs-place-order-button' ).length &&
                    !paymentButtonsTriggered ) {
                    paymentButtonsTriggered = true;
                    setTimeout( checkActiveButton, 500 );
                    watchStateOfPaymentButton();

                    setTimeout( setPhoneOptional, 3000 );

                } else if ( !$( '.cs-button-payment-method' ).length && paymentButtonsTriggered  ) {
                    paymentButtonsTriggered = false;
                }


                if ( $( '.loading-mask' ).length && !$( '.loading-mask' ).attr( 'style' )  && !step2Loaded ) {
                    step2Loaded = true;
                    setPhoneOptional();
                }
            });

            var checkoutObserverConfig = { attributes: true, childList: true, characterData: true, subtree: true };

            checkoutStep1Observer.observe( checkout, checkoutObserverConfig );


            // TEMPORARY WORKAROUND to make phone number optional
            // PLEASE CHECK if this feature is already implemeneted in Magento : https://github.com/magento/magento2/pull/8519

            function setPhoneOptional() {
                var $phoneInputs = $( 'input[name="telephone"]' );
                $phoneInputs.each( function() {
                    if( !/\d/.test( $( this ).val() ) ) {
                        $phoneInputs.css( 'color', 'transparent' );
                    }
                });

                $phoneInputs.on( 'focus', function() {
                    $phoneInputs.css( 'color', '' )
                });

                $phoneInputs.parents( '.cs-input' ).removeClass( '_required required');
                $phoneInputs.parents( '.cs-form__field' ).removeClass( '_required required');
                $( '.cs-checkout-button-next, .cs-payment button' ).on( 'click', function() {
                    $phoneInputs.each( function(){
                        if( !$( this ).val() ) {
                            $( this ).css( 'color', 'transparent' ).val( '<?php /* @escapeNotVerified */ echo __('No phone provided') ?>' ).change();
                        }
                    })
                } );
            }
            // end of phone workaround


            // Set zip and city in one line
            function setZipCityFields() {
                $( 'input[name="postcode"]' ).parents( '.cs-form__field' ).addClass( 'cs-form__field--type_small' );
                $( 'input[name="city"]' ).parents( '.cs-form__field' ).addClass( 'cs-form__field--type_medium');
            }


            function checkActiveButton() {
                var activeButton = $( '.payment-method._active .cs-button-payment-method[type="submit"]:not(disabled):not(".disabled")');

                if ( activeButton.length ) {
                    $( '.cs-place-order-button' ).prop( 'disabled', false );
                } else {
                    $( '.cs-place-order-button' ).prop( 'disabled', true );
                }

                return activeButton;
            }


            function startTabs() {
                $( '#tab-customer-title' ).on( 'click', function() {
                    $( '#shipping-new-address-form .cs-input' ).addClass( 'cs-input--disabled' ).find( 'input, ' +
                        'select' ).attr( 'disabled', 'disabled' );
                });

                $( '#tab-new-user-title' ).on( 'click', function() {
                    $( '#shipping-new-address-form .cs-input' ).removeClass( 'cs-input--disabled' ).find( 'input,' +
                        ' ' +
                        'select' ).removeAttr( 'disabled' );
                });
            }


            function watchStateOfPaymentButton() {
                $( '#co-payment-form' ).on( 'click', function() {
                    checkActiveButton();
                });

                $( '.cs-place-order-button' ).on( 'click', function() {
                    var activeButton = checkActiveButton();
                    if ( activeButton.length ) {
                        activeButton.trigger( 'click' );
                    }

                } );
            }


            blockLoader("<?php /* @escapeNotVerified */ echo $block->getViewFileUrl('images/loader-1.gif'); ?>");
            return url.setBaseUrl('<?php /* @escapeNotVerified */ echo $block->getBaseUrl();?>');
        })
    </script>
</div>
