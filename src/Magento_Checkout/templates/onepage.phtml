<?php
// @codingStandardsIgnoreFile
?>
<div id="checkout" data-bind="scope:'checkout'" class="cs-checkout">
    <div id="checkout-loader" data-role="checkout-loader" class="loading-mask" data-mage-init='{"checkoutLoader": {}}'>
        <div class="loader">
            <img
                src="<?php /* @escapeNotVerified */ echo $block->getViewFileUrl('images/loader-1.gif'); ?>"
                alt="<?php /* @escapeNotVerified */ echo __('Loading...'); ?>"
                style="position: absolute;"
                >
        </div>
    </div>
    <!-- ko template: getTemplate() --><!-- /ko -->
    <script type="text/x-magento-init">
        {
            "#checkout": {
                "Magento_Ui/js/core/app": <?php /* @escapeNotVerified */ echo $block->getJsLayout();?>
            }
        }
    </script>
    <script>
        window.checkoutConfig = <?php /* @escapeNotVerified */ echo \Zend_Json::encode($block->getCheckoutConfig()); ?>;
        // Create aliases for customer.js model from customer module
        window.isCustomerLoggedIn = window.checkoutConfig.isCustomerLoggedIn;
        window.customerData = window.checkoutConfig.customerData;
    </script>
    <script>
        require([
            'mage/url',
            'mage/validation',
            'Magento_Ui/js/block-loader',
            'jquery',
            'bundle'
        ], function(url, validation, blockLoader, $, bundle) {
            // Creativestyle adjustments below

            /**
             * Makes sure our custom next buttons trigger originals properly.
             */
            function handleCustomNextButtons() {
                var $customNextButtons = $('.cs-checkout-button-next');
                var $origNextButtons = $('#shipping-method-buttons-container button');
                if ($customNextButtons.length) {
                    // Probably there is a problem with: data-bind="css: { 'cs-no-display': isHidden() }" in
                    // next-button.html. In some percentages is isPayment is triggered on is Shipping
                    $('.cs-checkout__sidebar-bottom').removeClass('cs-no-display');

                    $customNextButtons.on('click', function() {
                        $origNextButtons.trigger('click');
                    });
                }
            }
            /**
             * Makes sure our custom order button gets proper state depending on
             * selected payment methods and triggers original order buttons properly.
             */
            function handleCustomOrderButtons() {
                var $customPlaceOrderButtons = $('.cs-place-order-button');
                var $checkoutPaymentMethods = $('#checkout-payment-method-load');

                $checkoutPaymentMethods.on('click change', function() {
                    var $origPlaceOrderButton = $('.payment-method._active .cs-button-payment-method[type="submit"]');
                    if ($origPlaceOrderButton.is(':not(disabled):not(".disabled")')) {
                        $customPlaceOrderButtons.prop('disabled', false);
                    } else {
                        $customPlaceOrderButtons.prop('disabled', true);
                    }
                });

                $customPlaceOrderButtons.on('click', function() {
                    var $origPlaceOrderButton = $('.payment-method._active .cs-button-payment-method[type="submit"]');
                    if ($origPlaceOrderButton.is(':not(disabled):not(".disabled")')) {
                        $origPlaceOrderButton.trigger('click');
                    }
                });
            }

            /**
             * Sets custom classes for address fields for styling purposes.
             */
            function setZipCityFields() {
                $('input[name="postcode"]').closest('.cs-form__field').addClass('cs-form__field--type_zip');
                $('input[name="city"]').closest('.cs-form__field').addClass('cs-form__field--type_city');
            }
            /**
             * Sets custom classes for personal information fields for styling purposes.
             */
            function setPersonFields() {
                $('select[name="prefix"]').closest('.cs-form__field').addClass('cs-form__field--type_prefix');
                $('input[name="firstname"]').closest('.cs-form__field').addClass('cs-form__field--type_firstname');
                $('input[name="lastname"]').closest('.cs-form__field').addClass('cs-form__field--type_lastname');
            }
            /**
             * Initializes inline validation for shipping information form fields
             * including custom logic for street name.
             */
            function initInlineValidation() {
                var $shippingForm = $('#co-shipping-form');

                $shippingForm.find('input').each(function() {
                    var $input = $(this);
                    var $inputComponent = $input.closest('.cs-input');
                    if ($inputComponent.hasClass('_required') ||  $inputComponent.hasClass('required')) {
                        if ($inputComponent.length && $input.attr('name') !== 'street[0]') {
                            $input.removeAttr('data-validate');
                        }
                    }

                    // Init validation on every checkout field
                    $input.validation();

                    $input.on('blur change', function() {
                        if ($input.validation('isValid') && $input.val() !== '') {
                            $inputComponent.addClass('cs-input--success');

                            if ($input.attr('name') == 'street[0]') {
                                if (!/\d/.test($input.val())) {
                                    $inputComponent.addClass('cs-input--warning');
                                    if (!$input.next().hasClass('cs-input__warning') && !$('.cs-html-select--autosuggest').length) {
                                        $input.after('<div class="cs-input__warning" >' + $.mage.__('Do not forget about your house number.') + '</div>');
                                    }
                                } else {
                                    $inputComponent
                                        .removeClass('cs-input--warning')
                                        .find('.cs-input__warning')
                                        .remove();
                                }
                            }
                        } else  {
                            $inputComponent.removeClass('cs-input--success');
                        }
                    });
                });
                $shippingForm.validation();
            }

            /**
             * Initializes all of our customizations.
             */
            function initCsCustomizations($shippingAddressForm) {
                setZipCityFields();
                setPersonFields();
                initInlineValidation();
                handleCustomNextButtons();
                handleCustomOrderButtons();

                bundle.AddressAutofill({
                    streetField: $shippingAddressForm.find('input[name="street[0]"]'),
                    zipField: $shippingAddressForm.find('input[name="postcode"]'),
                    cityField: $shippingAddressForm.find('input[name="city"]'),
                    countrySelect: $shippingAddressForm.find('select[name="country_id"]'),
                });
            }

            /**
             * Function used for making sure that checkout has already loaded.
             */
            function waitForCheckoutToLoad(isObserving) {
                var $shippingAddressForm = $('#co-shipping-form');
                var $checkoutLoader = $('#checkout-loader');
                // If shipping address form already loaded then fire up our tweaks and exit.
                if ($shippingAddressForm.length && !$checkoutLoader.length) {
                    if (isObserving) {
                        checkoutMutationObserver.disconnect();
                    }
                    initCsCustomizations($shippingAddressForm);
                    return;
                }
                // If not and Mutation Observer has not been hooked already.
                if(!isObserving) {
                    var checkoutNode = document.getElementById('checkout');
                    // If browser supports it and element is ready then use it.
                    if(MutationObserver && checkoutNode instanceof Node) {
                        checkoutMutationObserver = new MutationObserver(function(){
                            waitForCheckoutToLoad(true);
                        });
                        checkoutMutationObserver.observe(checkoutNode, {
                            attributes: false,
                            childList: true,
                            characterData: false,
                            subtree: true
                        });
                    } else {
                        // Otherwise fallback to simple setTimeout and try again.
                        setTimeout(
                            function(){
                                waitForCheckoutToLoad();
                            },
                            500
                        )
                    }
                }
            }
            waitForCheckoutToLoad();
            // End of creativestyle's customization.

            blockLoader("<?php /* @escapeNotVerified */ echo $block->getViewFileUrl('images/loader-1.gif'); ?>");
            return url.setBaseUrl('<?php /* @escapeNotVerified */ echo $block->getBaseUrl();?>');
        })
    </script>
</div>
